using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Globalization;
using System.Numerics;

namespace HelloCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            /* 1.    Write a program, which creates an array of 20 elements of type integer 
             * and initializes each of the elements with a value equals to the index of the element 
             * multiplied by 5. Print the elements to the console.
             */

            int[] array = new int[20];

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = i * 5;
                Console.Write(" " + array[i]);
            }
            
            /* 2.    Write a program, which reads two arrays from the console and checks whether 
             * they are equal (two arrays are equal when they are of equal length and all of their elements, 
             * which have the same index, are equal).
             */

            Console.Write("Enter n for first array's lenght: ");
            int n = int.Parse(Console.ReadLine());

            int[] arr = new int[n];

            for (int i = 0; i < n; i++)
            {
                Console.Write("Element {0} = ", i);
                arr[i] = int.Parse(Console.ReadLine());
            }

            Console.Write("Enter m for second array's lenght: ");
            int m = int.Parse(Console.ReadLine());

            int[] arr1 = new int[n];

            for (int k = 0; k < m; k++)
            {
                Console.Write("Element {0} = ", k);
                arr1[k] = int.Parse(Console.ReadLine());
            }

            bool equal = true;

            if (m != n)
            {
                equal = false;
            }
            else
            {
                for(int i = 0; i < n; i++)
                {
                    if (arr[i] != arr1[i])
                    equal = false;
                    break;
                }
            }
            Console.WriteLine("The two arrays are equal: {0}", equal);
            
            /* 4.    Write a program, which finds the maximal sequence of consecutive equal 
             * elements in an array. E.g.: {1, 1, 2, 3, 2, 2, 2, 1} à {2, 2, 2}.
             */

            Console.Write("Enter n for array's lenght: ");
            int n = int.Parse(Console.ReadLine());

            int[] arr = new int[n];

            for (int i = 0; i < n; i++)
            {
                Console.Write("Element {0} = ", i);
                arr[i] = int.Parse(Console.ReadLine());
            }

            int len = 1, bestValue = 0, bestLen = 1, value = 0;

            for (int i = 0; i < n - 1; i++)
            {
                if (arr[i] == arr[i + 1])
                {
                    len += 1;
                    value = arr[i];
                    if (bestLen < len)
                    {
                        bestLen = len;
                        bestValue = value;
                    }
                }
                else
                {
                    len = 1;
                }
            }

            Console.WriteLine("MaxLength is {0} and the value is {1}", bestLen, bestValue);
            
            /* 5.    Write a program, which finds the maximal sequence of consecutively 
             * placed increasing integers. Example: {3, 2, 3, 4, 2, 2, 4} à {2, 3, 4}.
             */

            Console.Write("Enter n for array's lenght: ");
            int n = int.Parse(Console.ReadLine());

            int[] arr = new int[n];

            for (int i = 0; i < n; i++)
            {
                Console.Write("Element {0} = ", i);
                arr[i] = int.Parse(Console.ReadLine());
            }

            int len = 1, bestStart = 0, bestLen = 1, start = 0;

            for (int i = 0; i < n - 1; i++)
            {
                if (arr[i] < arr[i + 1])
                {
                    len += 1;
                    if (bestLen < len)
                    {
                        bestLen = len;
                        bestStart = start;
                    }
                }
                else
                {
                    len = 1;
                    start = i + 1;
                }
            }

            Console.Write("The max sequence of increasing integers is : ");
            for (int k = bestStart; k < bestStart + bestLen; k++)
            {
                Console.Write(arr[k] + " ");
            }
            
            /* 7.    Write a program, which reads from the console two integer numbers N and K 
             * (K<N) and array of N integers. Find those K consecutive elements in the array, 
             * which have maximal sum.
             */
             
            Console.Write("Enter n for array's lenght: ");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Enter k < n : ");
            int k = int.Parse(Console.ReadLine());

            if (k < n)
            {
                int[] arr = new int[n];

                for (int i = 0; i < n; i++)
                {
                    Console.Write("Element {0} = ", i);
                    arr[i] = int.Parse(Console.ReadLine());
                }

                int sum = 0, bestSum = int.MinValue, start = 0, bestStart = 0;

                for (int i = 0; i < n - k + 1; i++)
                {
                    for (int r = start; r < start + k; r++)
                    {
                        sum += arr[r];
                    }
                    if (sum > bestSum)
                    {
                        bestSum = sum;
                        bestStart = start;
                    }
                    start += 1;
                    sum = 0;
                }
                Console.Write("The biggest sum is {0}. It is the sum of the following elements : ", bestSum);
                for (int p = bestStart; p < bestStart + k; p++)
                {
                    Console.Write(arr[p] + " ");
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter k < n.");
            }
            
            /* 8.    Sorting an array means to arrange its elements in an increasing (or decreasing) order. 
             * Write a program, which sorts an array using the algorithm "selection sort".
             */

            Console.Write("Enter n for array's length: ");
            int n = int.Parse(Console.ReadLine());

            int[] arr = new int[n];

            for (int i = 0; i < n; i++)
            {
                Console.Write("Element {0} = ", i);
                arr[i] = int.Parse(Console.ReadLine());
            }

            int tmp, minPosition;

            for (int i = 0; i < n -1; i++)
            {
                minPosition = i;

                for ( int j = i; j < n - 1; j++)
                {
                    if (arr[j] > arr[j + 1])
                    {
                        minPosition = j + 1;
                    }
                }
                tmp = arr[minPosition];
                arr[minPosition] = arr[i];
                arr[i] = tmp;
            }

            for (int i = 0; i < n; i++)
            {
                Console.Write(arr[i] + " ");
            }
            
            /* 10.   Write a program, which finds the most frequently occurring element in an array. 
             * Example: {4, 1, 1, 4, 2, 3, 4, 4, 1, 2, 4, 9, 3} à 4 (5 times).
             */

            Console.Write("Enter n for array's lenght: ");
            int n = int.Parse(Console.ReadLine());

            int[] arr = new int[n];

            for (int i = 0; i < n; i++)
            {
                Console.Write("Element {0} = ", i);
                arr[i] = int.Parse(Console.ReadLine());
            }

            int counter = 0, maxCounter = 0, value = 0;

            for (int i = 0; i < n; i++)
            {
                counter = 0;

                for (int j = i; j < n; j++)
                {
                    if (arr[i] == arr[j])
                    {
                        counter += 1;
                    }
                }
                if (counter > maxCounter)
                {
                    maxCounter = counter;
                    value = arr[i];
                }
            }
            Console.WriteLine("The most recurring element is {0} ({1} times).", value, maxCounter);
            
            /* 12.   Write a program, which creates square matrices like those in the figures below 
             * and prints them formatted to the console. The size of the matrices will be read 
             * from the console. E.g. matrices with size of 4 x 4:
             * a) 1 5  9 13  b) 1 8  9 16  c) 7 11 14 16  d)* 1 12 11 10
             *    2 6 10 14     2 7 10 15     4  8 12 15      2 13 16  9
             *    3 7 11 15     3 6 11 14     2  5  9 13      3 14 15  8
             *    4 8 12 16     4 5 12 13     1  3  6 10      4  5  6  7
             */

            a) Console.Write("Enter n for array's lenght: ");
            int n = int.Parse(Console.ReadLine());

            int[,] arr = new int[n,n];

            int value = 1;

            for (int col = 0; col < n; col++)
            {
                for (int row = 0; row < n; row++)
                {
                    arr[row, col] = value;
                    value += 1;
                }
            }
            
            // OR
            
            int row, col;
            for (int i = 0; i < n * n; i++)
            {
            row = i % n;
            col = i / n;
            arr[row, col] = i + 1;
            }
            b) int value = 1;

            for (int col = 0; col < n; col += 2)
            {
                for (int row = 0; row < n; row++)
                {
                    arr[row, col] = value;
                    value++;
                }
                value += n;
            }

            value = n + 1;

            for (int col = 1; col < n; col += 2)
            {
                for (int row = n - 1; row >= 0; row--)
                {
                    arr[row, col] = value;
                    value++;
                }
                value += n;
            }
            
            //OR
            
            int row, col;
            for (int i = 0; i < n * n; i++)
            {
                row = i % n;
                col = i / n;

                if (col % 2 > 0)
                {
                    row = n - 1 - row;
                }
                arr[row, col] = i + 1;
            }
            c) 
            
            
            for (int row = 0; row < n; row++)
            {
                for (int col = 0; col < n; col++)
                {
                    Console.Write("{0,4}", arr[row,col]);
                }
                Console.WriteLine();
            }
        }
    }
}
